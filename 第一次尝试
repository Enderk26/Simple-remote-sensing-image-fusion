#include <stdio.h>
#include <string.h>/*包含函数strcpy() 
                      strncat() strcat()*/    
#include <fcntl.h>//包含函数open() close() 
#include <unistd.h>/*包含函数lseek()
                      read() write()*/ 
#include <stdlib.h>//包含函数 atoi()

typedef  unsigned char uchar;
typedef  unsigned short ushort;
typedef  unsigned int ulong;

#pragma  pack(1)
typedef struct
{
    //bmp header
    ushort bfType;         // B  M
    ulong bfSize;         //文件大小
    ushort bfReserved1;
    ushort bfReserved2;
    ulong bfOffBits;      //文件头偏移量

    //DIB header
    ulong biSize;         //DIB头大小
    ulong biWidth;        //文件宽度
    ulong biHeight;       //文件高度
    ushort biPlanes;
    ushort biBitCount;     //每个相素点的位数
    ulong biCompression;
    ulong biSizeImage;    //图文件大小
    ulong biXPelsPerMeter;
    ulong biYPelsPerMeter;
    ulong biClrUsed;
    ulong biClrImportant;
} BMP_HEADER;

uchar data1[512*512*3];
uchar data2[512*512*3];
uchar data[512*512*3];

int main(int argc, char *argv [])
{
    int fd1,fd2;
    int a,b,c,d;
    int Tag=1;
    char name1[256],name2[256];
    char name3[256],name4[256];
    BMP_HEADER  header1;
    BMP_HEADER  header2;
    
	//命令行测试需要 
    if(argc==1)
	{
		printf("File name of the image (or the coordinateds) to be processed: ");
        scanf("%s %s", name1,name2);
        strcpy(name3,"");
        strncat(name3,name1,strlen(name1)-4);
        strcat(name3,".new.bmp");
        strcpy(name4,"");
        strncat(name4,name2,strlen(name2)-4);
        strcat(name4,".new.bmp");
	}
	
	else if(argc==3)//3个参数 
	{
		strcpy(name1,argv[1]);
		strcpy(name3,"");
        strncat(name3,name1,strlen(name1)-4);
        strcat(name3,".new.bmp");
        strcpy(name2,argv[2]);
        strcpy(name4,"");
        strncat(name4,name2,strlen(name2)-4);
        strcat(name4,".new.bmp");
	}
	
	else if(argc==7)//7个参数 
	{
		strcpy(name1,argv[1]);
		strcpy(name3,"");
        strncat(name3,name1,strlen(name1)-4);
        strcat(name3,".new.bmp");
        strcpy(name2,argv[2]);
        strcpy(name4,"");
        strncat(name4,name2,strlen(name2)-4);
        strcat(name4,".new.bmp");
        a=atoi(argv[3]);
        b=atoi(argv[4]);
        c=atoi(argv[5]);
        d=atoi(argv[6]);
	}
	
    if(argc==1||argc==3)
    {
    	while(Tag)
	 {
		if(getchar()=='\n') 
        { 
            a=0;
            b=0;
            c=255;
            d=255;
            break; 
        }
        Tag--;
        scanf("%d %d %d %d",&a,&b,&c,&d);//输入指定融合部分的坐标（如果需要） 
	 } 
	}
    
    fd1=open(name1,O_RDONLY|O_BINARY);//以只读方式打开文件 
    if(-1==fd1)
        perror("open the first bmp file fail");
    
    fd2=open(name2,O_RDONLY|O_BINARY);
    if(-1==fd2)
        perror("open the second bmp file fail");

    read(fd1,&header1,sizeof(BMP_HEADER));
    read(fd2,&header2,sizeof(BMP_HEADER));

    
    lseek(fd1,header1.bfOffBits,SEEK_SET);
    read(fd1, data1, header1.biSizeImage);
    
    lseek(fd2,header2.bfOffBits,SEEK_SET);
    read(fd2,data2,header2.biSizeImage);

    close(fd1);
    close(fd2);
    
    int i,j,k,y,h;
	int width1,height1,sizeImage1,bpp1,stride1;
	int width2,height2,sizeImage2,bpp2,stride2;
	int n=0;
	int tag=0;
	
	width1=header1.biWidth;
	height1=header1.biHeight;
	sizeImage1=header1.biSizeImage;
	stride1=sizeImage1/height1;
	width2=header2.biWidth;     
	height2=header2.biHeight;
	sizeImage2=header2.biSizeImage;
	stride2=sizeImage2/height2;
	bpp1=header1.biBitCount;
	bpp2=header2.biBitCount;
	
	if(bpp1==8&&bpp2==24)
	{
		fd2=open(name4,O_WRONLY|O_CREAT|O_TRUNC|O_BINARY);//以只写方式打开文件 
		write(fd2,&header2,sizeof(BMP_HEADER));
		uchar I[width1*height1];
		
	    
	    for(i=0;i<512*512*3;i++)
	    {
	    	data[i]=data2[i];
		}
		
		for(i=0;i<width2*height2*3;i++)
		{
			I[tag]=(uchar)((data2[i]+data2[i+1]+data2[i+2])/3);
			tag++;
			i+=2;
	    }
	    
		for(i=0;i<width2*height2;i++)
		{
			k=data1[i]-I[i];
			for(j=0;j<3;j++)
			{
				y=data2[i*3+j]+k;
				if(y<=0)
				{
					data2[i*3+j]=0;
				}
				if(y>=255)
				{
					data2[i*3+j]=255;
				}
				else if(y>0&&y<255)
				{
					data2[i*3+j]=y;
				}
			}
	    }
	    
	    for(i=a;i<c+1;i++)
	    {
	    	for(j=b*3;j<(d+1)*3;j++)
	    	{
	    		h=(255-i)*stride2+j;
	    		data[h]=data2[h];
	    	}
		}
		write(fd2,data,header2.biSizeImage);
        close(fd2);
	}

	else if(bpp1==24&&bpp2==8)
	{
		fd1=open(name3,O_WRONLY|O_CREAT|O_TRUNC|O_BINARY);
		write(fd1,&header1,sizeof(BMP_HEADER));
		uchar I[width2*height2];
	    
	    for(i=0;i<512*512*3;i++)
	    {
	    	data[i]=data1[i];
		}
		
	    for(i=0;i<width1*height1*3;i++)
		{
			I[tag]=(uchar)((data1[i]+data1[i+1]+data1[i+2])/3);
			tag++;
			i+=2;
		}
		
		for(i=0;i<width1*height1;i++)
		{
			k=data2[i]-I[i];
			for(j=0;j<3;j++)
			{
				y=data1[i*3+j]+k;
				if(y<=0)
				{
					data1[i*3+j]=0;
				}
				if(y>=255)
				{
					data1[i*3+j]=255;
				}
				else if(y>0&&y<255)
				{
					data1[i*3+j]=y;
				}
			}
	    }
	    
	    for(i=a;i<c+1;i++)
	    {
	    	for(j=b*3;j<(d+1)*3;j++)
	    	{
	    		h=(255-i)*stride1+j;
	    		data[h]=data1[h];
			}
		}
		
		write(fd1,data,header1.biSizeImage);
        close(fd1);
	}
	
	else
        perror("Wrong type of images."); 
}
